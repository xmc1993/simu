/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.superid.webapp.notice.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-16")
public class S2c implements org.apache.thrift.TBase<S2c, S2c._Fields>, java.io.Serializable, Cloneable, Comparable<S2c> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("S2c");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FR_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("frUid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TO_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("toUid", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField RID_FIELD_DESC = new org.apache.thrift.protocol.TField("rid", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ALL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("allId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField AID_FIELD_DESC = new org.apache.thrift.protocol.TField("aid", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField TO_AID_FIELD_DESC = new org.apache.thrift.protocol.TField("toAid", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField("tid", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField TO_RID_FIELD_DESC = new org.apache.thrift.protocol.TField("toRid", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField FR_RID_FIELD_DESC = new org.apache.thrift.protocol.TField("frRid", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField SUB_FIELD_DESC = new org.apache.thrift.protocol.TField("sub", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I32, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new S2cStandardSchemeFactory());
    schemes.put(TupleScheme.class, new S2cTupleSchemeFactory());
  }

  public int type; // optional
  public long frUid; // optional
  public long toUid; // optional
  public long rid; // optional
  public long allId; // optional
  public long aid; // optional
  public long toAid; // optional
  public long tid; // optional
  public long toRid; // optional
  public long frRid; // optional
  public int sub; // optional
  public String content; // optional
  public long time; // optional
  public int index; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TYPE((short)1, "type"),
    FR_UID((short)2, "frUid"),
    TO_UID((short)3, "toUid"),
    RID((short)4, "rid"),
    ALL_ID((short)5, "allId"),
    AID((short)6, "aid"),
    TO_AID((short)7, "toAid"),
    TID((short)8, "tid"),
    TO_RID((short)9, "toRid"),
    FR_RID((short)10, "frRid"),
    SUB((short)11, "sub"),
    CONTENT((short)12, "content"),
    TIME((short)13, "time"),
    INDEX((short)14, "index");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // FR_UID
          return FR_UID;
        case 3: // TO_UID
          return TO_UID;
        case 4: // RID
          return RID;
        case 5: // ALL_ID
          return ALL_ID;
        case 6: // AID
          return AID;
        case 7: // TO_AID
          return TO_AID;
        case 8: // TID
          return TID;
        case 9: // TO_RID
          return TO_RID;
        case 10: // FR_RID
          return FR_RID;
        case 11: // SUB
          return SUB;
        case 12: // CONTENT
          return CONTENT;
        case 13: // TIME
          return TIME;
        case 14: // INDEX
          return INDEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TYPE_ISSET_ID = 0;
  private static final int __FRUID_ISSET_ID = 1;
  private static final int __TOUID_ISSET_ID = 2;
  private static final int __RID_ISSET_ID = 3;
  private static final int __ALLID_ISSET_ID = 4;
  private static final int __AID_ISSET_ID = 5;
  private static final int __TOAID_ISSET_ID = 6;
  private static final int __TID_ISSET_ID = 7;
  private static final int __TORID_ISSET_ID = 8;
  private static final int __FRRID_ISSET_ID = 9;
  private static final int __SUB_ISSET_ID = 10;
  private static final int __TIME_ISSET_ID = 11;
  private static final int __INDEX_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TYPE,_Fields.FR_UID,_Fields.TO_UID,_Fields.RID,_Fields.ALL_ID,_Fields.AID,_Fields.TO_AID,_Fields.TID,_Fields.TO_RID,_Fields.FR_RID,_Fields.SUB,_Fields.CONTENT,_Fields.TIME,_Fields.INDEX};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FR_UID, new org.apache.thrift.meta_data.FieldMetaData("frUid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TO_UID, new org.apache.thrift.meta_data.FieldMetaData("toUid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RID, new org.apache.thrift.meta_data.FieldMetaData("rid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ALL_ID, new org.apache.thrift.meta_data.FieldMetaData("allId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AID, new org.apache.thrift.meta_data.FieldMetaData("aid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TO_AID, new org.apache.thrift.meta_data.FieldMetaData("toAid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TO_RID, new org.apache.thrift.meta_data.FieldMetaData("toRid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FR_RID, new org.apache.thrift.meta_data.FieldMetaData("frRid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUB, new org.apache.thrift.meta_data.FieldMetaData("sub", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(S2c.class, metaDataMap);
  }

  public S2c() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public S2c(S2c other) {
    __isset_bitfield = other.__isset_bitfield;
    this.type = other.type;
    this.frUid = other.frUid;
    this.toUid = other.toUid;
    this.rid = other.rid;
    this.allId = other.allId;
    this.aid = other.aid;
    this.toAid = other.toAid;
    this.tid = other.tid;
    this.toRid = other.toRid;
    this.frRid = other.frRid;
    this.sub = other.sub;
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.time = other.time;
    this.index = other.index;
  }

  public S2c deepCopy() {
    return new S2c(this);
  }

  @Override
  public void clear() {
    setTypeIsSet(false);
    this.type = 0;
    setFrUidIsSet(false);
    this.frUid = 0;
    setToUidIsSet(false);
    this.toUid = 0;
    setRidIsSet(false);
    this.rid = 0;
    setAllIdIsSet(false);
    this.allId = 0;
    setAidIsSet(false);
    this.aid = 0;
    setToAidIsSet(false);
    this.toAid = 0;
    setTidIsSet(false);
    this.tid = 0;
    setToRidIsSet(false);
    this.toRid = 0;
    setFrRidIsSet(false);
    this.frRid = 0;
    setSubIsSet(false);
    this.sub = 0;
    this.content = null;
    setTimeIsSet(false);
    this.time = 0;
    setIndexIsSet(false);
    this.index = 0;
  }

  public int getType() {
    return this.type;
  }

  public S2c setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public long getFrUid() {
    return this.frUid;
  }

  public S2c setFrUid(long frUid) {
    this.frUid = frUid;
    setFrUidIsSet(true);
    return this;
  }

  public void unsetFrUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRUID_ISSET_ID);
  }

  /** Returns true if field frUid is set (has been assigned a value) and false otherwise */
  public boolean isSetFrUid() {
    return EncodingUtils.testBit(__isset_bitfield, __FRUID_ISSET_ID);
  }

  public void setFrUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRUID_ISSET_ID, value);
  }

  public long getToUid() {
    return this.toUid;
  }

  public S2c setToUid(long toUid) {
    this.toUid = toUid;
    setToUidIsSet(true);
    return this;
  }

  public void unsetToUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOUID_ISSET_ID);
  }

  /** Returns true if field toUid is set (has been assigned a value) and false otherwise */
  public boolean isSetToUid() {
    return EncodingUtils.testBit(__isset_bitfield, __TOUID_ISSET_ID);
  }

  public void setToUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOUID_ISSET_ID, value);
  }

  public long getRid() {
    return this.rid;
  }

  public S2c setRid(long rid) {
    this.rid = rid;
    setRidIsSet(true);
    return this;
  }

  public void unsetRid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RID_ISSET_ID);
  }

  /** Returns true if field rid is set (has been assigned a value) and false otherwise */
  public boolean isSetRid() {
    return EncodingUtils.testBit(__isset_bitfield, __RID_ISSET_ID);
  }

  public void setRidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RID_ISSET_ID, value);
  }

  public long getAllId() {
    return this.allId;
  }

  public S2c setAllId(long allId) {
    this.allId = allId;
    setAllIdIsSet(true);
    return this;
  }

  public void unsetAllId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLID_ISSET_ID);
  }

  /** Returns true if field allId is set (has been assigned a value) and false otherwise */
  public boolean isSetAllId() {
    return EncodingUtils.testBit(__isset_bitfield, __ALLID_ISSET_ID);
  }

  public void setAllIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLID_ISSET_ID, value);
  }

  public long getAid() {
    return this.aid;
  }

  public S2c setAid(long aid) {
    this.aid = aid;
    setAidIsSet(true);
    return this;
  }

  public void unsetAid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AID_ISSET_ID);
  }

  /** Returns true if field aid is set (has been assigned a value) and false otherwise */
  public boolean isSetAid() {
    return EncodingUtils.testBit(__isset_bitfield, __AID_ISSET_ID);
  }

  public void setAidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AID_ISSET_ID, value);
  }

  public long getToAid() {
    return this.toAid;
  }

  public S2c setToAid(long toAid) {
    this.toAid = toAid;
    setToAidIsSet(true);
    return this;
  }

  public void unsetToAid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOAID_ISSET_ID);
  }

  /** Returns true if field toAid is set (has been assigned a value) and false otherwise */
  public boolean isSetToAid() {
    return EncodingUtils.testBit(__isset_bitfield, __TOAID_ISSET_ID);
  }

  public void setToAidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOAID_ISSET_ID, value);
  }

  public long getTid() {
    return this.tid;
  }

  public S2c setTid(long tid) {
    this.tid = tid;
    setTidIsSet(true);
    return this;
  }

  public void unsetTid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TID_ISSET_ID);
  }

  /** Returns true if field tid is set (has been assigned a value) and false otherwise */
  public boolean isSetTid() {
    return EncodingUtils.testBit(__isset_bitfield, __TID_ISSET_ID);
  }

  public void setTidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TID_ISSET_ID, value);
  }

  public long getToRid() {
    return this.toRid;
  }

  public S2c setToRid(long toRid) {
    this.toRid = toRid;
    setToRidIsSet(true);
    return this;
  }

  public void unsetToRid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TORID_ISSET_ID);
  }

  /** Returns true if field toRid is set (has been assigned a value) and false otherwise */
  public boolean isSetToRid() {
    return EncodingUtils.testBit(__isset_bitfield, __TORID_ISSET_ID);
  }

  public void setToRidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TORID_ISSET_ID, value);
  }

  public long getFrRid() {
    return this.frRid;
  }

  public S2c setFrRid(long frRid) {
    this.frRid = frRid;
    setFrRidIsSet(true);
    return this;
  }

  public void unsetFrRid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRRID_ISSET_ID);
  }

  /** Returns true if field frRid is set (has been assigned a value) and false otherwise */
  public boolean isSetFrRid() {
    return EncodingUtils.testBit(__isset_bitfield, __FRRID_ISSET_ID);
  }

  public void setFrRidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRRID_ISSET_ID, value);
  }

  public int getSub() {
    return this.sub;
  }

  public S2c setSub(int sub) {
    this.sub = sub;
    setSubIsSet(true);
    return this;
  }

  public void unsetSub() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUB_ISSET_ID);
  }

  /** Returns true if field sub is set (has been assigned a value) and false otherwise */
  public boolean isSetSub() {
    return EncodingUtils.testBit(__isset_bitfield, __SUB_ISSET_ID);
  }

  public void setSubIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUB_ISSET_ID, value);
  }

  public String getContent() {
    return this.content;
  }

  public S2c setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public long getTime() {
    return this.time;
  }

  public S2c setTime(long time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public int getIndex() {
    return this.index;
  }

  public S2c setIndex(int index) {
    this.index = index;
    setIndexIsSet(true);
    return this;
  }

  public void unsetIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  /** Returns true if field index is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  public void setIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case FR_UID:
      if (value == null) {
        unsetFrUid();
      } else {
        setFrUid((Long)value);
      }
      break;

    case TO_UID:
      if (value == null) {
        unsetToUid();
      } else {
        setToUid((Long)value);
      }
      break;

    case RID:
      if (value == null) {
        unsetRid();
      } else {
        setRid((Long)value);
      }
      break;

    case ALL_ID:
      if (value == null) {
        unsetAllId();
      } else {
        setAllId((Long)value);
      }
      break;

    case AID:
      if (value == null) {
        unsetAid();
      } else {
        setAid((Long)value);
      }
      break;

    case TO_AID:
      if (value == null) {
        unsetToAid();
      } else {
        setToAid((Long)value);
      }
      break;

    case TID:
      if (value == null) {
        unsetTid();
      } else {
        setTid((Long)value);
      }
      break;

    case TO_RID:
      if (value == null) {
        unsetToRid();
      } else {
        setToRid((Long)value);
      }
      break;

    case FR_RID:
      if (value == null) {
        unsetFrRid();
      } else {
        setFrRid((Long)value);
      }
      break;

    case SUB:
      if (value == null) {
        unsetSub();
      } else {
        setSub((Integer)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Long)value);
      }
      break;

    case INDEX:
      if (value == null) {
        unsetIndex();
      } else {
        setIndex((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case FR_UID:
      return getFrUid();

    case TO_UID:
      return getToUid();

    case RID:
      return getRid();

    case ALL_ID:
      return getAllId();

    case AID:
      return getAid();

    case TO_AID:
      return getToAid();

    case TID:
      return getTid();

    case TO_RID:
      return getToRid();

    case FR_RID:
      return getFrRid();

    case SUB:
      return getSub();

    case CONTENT:
      return getContent();

    case TIME:
      return getTime();

    case INDEX:
      return getIndex();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case FR_UID:
      return isSetFrUid();
    case TO_UID:
      return isSetToUid();
    case RID:
      return isSetRid();
    case ALL_ID:
      return isSetAllId();
    case AID:
      return isSetAid();
    case TO_AID:
      return isSetToAid();
    case TID:
      return isSetTid();
    case TO_RID:
      return isSetToRid();
    case FR_RID:
      return isSetFrRid();
    case SUB:
      return isSetSub();
    case CONTENT:
      return isSetContent();
    case TIME:
      return isSetTime();
    case INDEX:
      return isSetIndex();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof S2c)
      return this.equals((S2c)that);
    return false;
  }

  public boolean equals(S2c that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_frUid = true && this.isSetFrUid();
    boolean that_present_frUid = true && that.isSetFrUid();
    if (this_present_frUid || that_present_frUid) {
      if (!(this_present_frUid && that_present_frUid))
        return false;
      if (this.frUid != that.frUid)
        return false;
    }

    boolean this_present_toUid = true && this.isSetToUid();
    boolean that_present_toUid = true && that.isSetToUid();
    if (this_present_toUid || that_present_toUid) {
      if (!(this_present_toUid && that_present_toUid))
        return false;
      if (this.toUid != that.toUid)
        return false;
    }

    boolean this_present_rid = true && this.isSetRid();
    boolean that_present_rid = true && that.isSetRid();
    if (this_present_rid || that_present_rid) {
      if (!(this_present_rid && that_present_rid))
        return false;
      if (this.rid != that.rid)
        return false;
    }

    boolean this_present_allId = true && this.isSetAllId();
    boolean that_present_allId = true && that.isSetAllId();
    if (this_present_allId || that_present_allId) {
      if (!(this_present_allId && that_present_allId))
        return false;
      if (this.allId != that.allId)
        return false;
    }

    boolean this_present_aid = true && this.isSetAid();
    boolean that_present_aid = true && that.isSetAid();
    if (this_present_aid || that_present_aid) {
      if (!(this_present_aid && that_present_aid))
        return false;
      if (this.aid != that.aid)
        return false;
    }

    boolean this_present_toAid = true && this.isSetToAid();
    boolean that_present_toAid = true && that.isSetToAid();
    if (this_present_toAid || that_present_toAid) {
      if (!(this_present_toAid && that_present_toAid))
        return false;
      if (this.toAid != that.toAid)
        return false;
    }

    boolean this_present_tid = true && this.isSetTid();
    boolean that_present_tid = true && that.isSetTid();
    if (this_present_tid || that_present_tid) {
      if (!(this_present_tid && that_present_tid))
        return false;
      if (this.tid != that.tid)
        return false;
    }

    boolean this_present_toRid = true && this.isSetToRid();
    boolean that_present_toRid = true && that.isSetToRid();
    if (this_present_toRid || that_present_toRid) {
      if (!(this_present_toRid && that_present_toRid))
        return false;
      if (this.toRid != that.toRid)
        return false;
    }

    boolean this_present_frRid = true && this.isSetFrRid();
    boolean that_present_frRid = true && that.isSetFrRid();
    if (this_present_frRid || that_present_frRid) {
      if (!(this_present_frRid && that_present_frRid))
        return false;
      if (this.frRid != that.frRid)
        return false;
    }

    boolean this_present_sub = true && this.isSetSub();
    boolean that_present_sub = true && that.isSetSub();
    if (this_present_sub || that_present_sub) {
      if (!(this_present_sub && that_present_sub))
        return false;
      if (this.sub != that.sub)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_time = true && this.isSetTime();
    boolean that_present_time = true && that.isSetTime();
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_index = true && this.isSetIndex();
    boolean that_present_index = true && that.isSetIndex();
    if (this_present_index || that_present_index) {
      if (!(this_present_index && that_present_index))
        return false;
      if (this.index != that.index)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_frUid = true && (isSetFrUid());
    list.add(present_frUid);
    if (present_frUid)
      list.add(frUid);

    boolean present_toUid = true && (isSetToUid());
    list.add(present_toUid);
    if (present_toUid)
      list.add(toUid);

    boolean present_rid = true && (isSetRid());
    list.add(present_rid);
    if (present_rid)
      list.add(rid);

    boolean present_allId = true && (isSetAllId());
    list.add(present_allId);
    if (present_allId)
      list.add(allId);

    boolean present_aid = true && (isSetAid());
    list.add(present_aid);
    if (present_aid)
      list.add(aid);

    boolean present_toAid = true && (isSetToAid());
    list.add(present_toAid);
    if (present_toAid)
      list.add(toAid);

    boolean present_tid = true && (isSetTid());
    list.add(present_tid);
    if (present_tid)
      list.add(tid);

    boolean present_toRid = true && (isSetToRid());
    list.add(present_toRid);
    if (present_toRid)
      list.add(toRid);

    boolean present_frRid = true && (isSetFrRid());
    list.add(present_frRid);
    if (present_frRid)
      list.add(frRid);

    boolean present_sub = true && (isSetSub());
    list.add(present_sub);
    if (present_sub)
      list.add(sub);

    boolean present_content = true && (isSetContent());
    list.add(present_content);
    if (present_content)
      list.add(content);

    boolean present_time = true && (isSetTime());
    list.add(present_time);
    if (present_time)
      list.add(time);

    boolean present_index = true && (isSetIndex());
    list.add(present_index);
    if (present_index)
      list.add(index);

    return list.hashCode();
  }

  @Override
  public int compareTo(S2c other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrUid()).compareTo(other.isSetFrUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frUid, other.frUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToUid()).compareTo(other.isSetToUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toUid, other.toUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRid()).compareTo(other.isSetRid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rid, other.rid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllId()).compareTo(other.isSetAllId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allId, other.allId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAid()).compareTo(other.isSetAid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aid, other.aid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToAid()).compareTo(other.isSetToAid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToAid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toAid, other.toAid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTid()).compareTo(other.isSetTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, other.tid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToRid()).compareTo(other.isSetToRid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToRid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toRid, other.toRid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrRid()).compareTo(other.isSetFrRid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrRid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frRid, other.frRid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSub()).compareTo(other.isSetSub());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSub()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sub, other.sub);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndex()).compareTo(other.isSetIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, other.index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("S2c(");
    boolean first = true;

    if (isSetType()) {
      sb.append("type:");
      sb.append(this.type);
      first = false;
    }
    if (isSetFrUid()) {
      if (!first) sb.append(", ");
      sb.append("frUid:");
      sb.append(this.frUid);
      first = false;
    }
    if (isSetToUid()) {
      if (!first) sb.append(", ");
      sb.append("toUid:");
      sb.append(this.toUid);
      first = false;
    }
    if (isSetRid()) {
      if (!first) sb.append(", ");
      sb.append("rid:");
      sb.append(this.rid);
      first = false;
    }
    if (isSetAllId()) {
      if (!first) sb.append(", ");
      sb.append("allId:");
      sb.append(this.allId);
      first = false;
    }
    if (isSetAid()) {
      if (!first) sb.append(", ");
      sb.append("aid:");
      sb.append(this.aid);
      first = false;
    }
    if (isSetToAid()) {
      if (!first) sb.append(", ");
      sb.append("toAid:");
      sb.append(this.toAid);
      first = false;
    }
    if (isSetTid()) {
      if (!first) sb.append(", ");
      sb.append("tid:");
      sb.append(this.tid);
      first = false;
    }
    if (isSetToRid()) {
      if (!first) sb.append(", ");
      sb.append("toRid:");
      sb.append(this.toRid);
      first = false;
    }
    if (isSetFrRid()) {
      if (!first) sb.append(", ");
      sb.append("frRid:");
      sb.append(this.frRid);
      first = false;
    }
    if (isSetSub()) {
      if (!first) sb.append(", ");
      sb.append("sub:");
      sb.append(this.sub);
      first = false;
    }
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
    }
    if (isSetTime()) {
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
    }
    if (isSetIndex()) {
      if (!first) sb.append(", ");
      sb.append("index:");
      sb.append(this.index);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class S2cStandardSchemeFactory implements SchemeFactory {
    public S2cStandardScheme getScheme() {
      return new S2cStandardScheme();
    }
  }

  private static class S2cStandardScheme extends StandardScheme<S2c> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, S2c struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FR_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.frUid = iprot.readI64();
              struct.setFrUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TO_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.toUid = iprot.readI64();
              struct.setToUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rid = iprot.readI64();
              struct.setRidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ALL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.allId = iprot.readI64();
              struct.setAllIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.aid = iprot.readI64();
              struct.setAidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TO_AID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.toAid = iprot.readI64();
              struct.setToAidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tid = iprot.readI64();
              struct.setTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TO_RID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.toRid = iprot.readI64();
              struct.setToRidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FR_RID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.frRid = iprot.readI64();
              struct.setFrRidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SUB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sub = iprot.readI32();
              struct.setSubIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.time = iprot.readI64();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.index = iprot.readI32();
              struct.setIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, S2c struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetType()) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFrUid()) {
        oprot.writeFieldBegin(FR_UID_FIELD_DESC);
        oprot.writeI64(struct.frUid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetToUid()) {
        oprot.writeFieldBegin(TO_UID_FIELD_DESC);
        oprot.writeI64(struct.toUid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRid()) {
        oprot.writeFieldBegin(RID_FIELD_DESC);
        oprot.writeI64(struct.rid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAllId()) {
        oprot.writeFieldBegin(ALL_ID_FIELD_DESC);
        oprot.writeI64(struct.allId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAid()) {
        oprot.writeFieldBegin(AID_FIELD_DESC);
        oprot.writeI64(struct.aid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetToAid()) {
        oprot.writeFieldBegin(TO_AID_FIELD_DESC);
        oprot.writeI64(struct.toAid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTid()) {
        oprot.writeFieldBegin(TID_FIELD_DESC);
        oprot.writeI64(struct.tid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetToRid()) {
        oprot.writeFieldBegin(TO_RID_FIELD_DESC);
        oprot.writeI64(struct.toRid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFrRid()) {
        oprot.writeFieldBegin(FR_RID_FIELD_DESC);
        oprot.writeI64(struct.frRid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSub()) {
        oprot.writeFieldBegin(SUB_FIELD_DESC);
        oprot.writeI32(struct.sub);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTime()) {
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI64(struct.time);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIndex()) {
        oprot.writeFieldBegin(INDEX_FIELD_DESC);
        oprot.writeI32(struct.index);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class S2cTupleSchemeFactory implements SchemeFactory {
    public S2cTupleScheme getScheme() {
      return new S2cTupleScheme();
    }
  }

  private static class S2cTupleScheme extends TupleScheme<S2c> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, S2c struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetFrUid()) {
        optionals.set(1);
      }
      if (struct.isSetToUid()) {
        optionals.set(2);
      }
      if (struct.isSetRid()) {
        optionals.set(3);
      }
      if (struct.isSetAllId()) {
        optionals.set(4);
      }
      if (struct.isSetAid()) {
        optionals.set(5);
      }
      if (struct.isSetToAid()) {
        optionals.set(6);
      }
      if (struct.isSetTid()) {
        optionals.set(7);
      }
      if (struct.isSetToRid()) {
        optionals.set(8);
      }
      if (struct.isSetFrRid()) {
        optionals.set(9);
      }
      if (struct.isSetSub()) {
        optionals.set(10);
      }
      if (struct.isSetContent()) {
        optionals.set(11);
      }
      if (struct.isSetTime()) {
        optionals.set(12);
      }
      if (struct.isSetIndex()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetFrUid()) {
        oprot.writeI64(struct.frUid);
      }
      if (struct.isSetToUid()) {
        oprot.writeI64(struct.toUid);
      }
      if (struct.isSetRid()) {
        oprot.writeI64(struct.rid);
      }
      if (struct.isSetAllId()) {
        oprot.writeI64(struct.allId);
      }
      if (struct.isSetAid()) {
        oprot.writeI64(struct.aid);
      }
      if (struct.isSetToAid()) {
        oprot.writeI64(struct.toAid);
      }
      if (struct.isSetTid()) {
        oprot.writeI64(struct.tid);
      }
      if (struct.isSetToRid()) {
        oprot.writeI64(struct.toRid);
      }
      if (struct.isSetFrRid()) {
        oprot.writeI64(struct.frRid);
      }
      if (struct.isSetSub()) {
        oprot.writeI32(struct.sub);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetTime()) {
        oprot.writeI64(struct.time);
      }
      if (struct.isSetIndex()) {
        oprot.writeI32(struct.index);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, S2c struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.frUid = iprot.readI64();
        struct.setFrUidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.toUid = iprot.readI64();
        struct.setToUidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.rid = iprot.readI64();
        struct.setRidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.allId = iprot.readI64();
        struct.setAllIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.aid = iprot.readI64();
        struct.setAidIsSet(true);
      }
      if (incoming.get(6)) {
        struct.toAid = iprot.readI64();
        struct.setToAidIsSet(true);
      }
      if (incoming.get(7)) {
        struct.tid = iprot.readI64();
        struct.setTidIsSet(true);
      }
      if (incoming.get(8)) {
        struct.toRid = iprot.readI64();
        struct.setToRidIsSet(true);
      }
      if (incoming.get(9)) {
        struct.frRid = iprot.readI64();
        struct.setFrRidIsSet(true);
      }
      if (incoming.get(10)) {
        struct.sub = iprot.readI32();
        struct.setSubIsSet(true);
      }
      if (incoming.get(11)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(12)) {
        struct.time = iprot.readI64();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.index = iprot.readI32();
        struct.setIndexIsSet(true);
      }
    }
  }

}

